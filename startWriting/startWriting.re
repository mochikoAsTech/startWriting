= 技術を文章でわかりやすく伝える

勉強会で講師役を務める、イベントで登壇する、後輩に実装方法を教える、そして技術書を書く。
私たちは色んな場面で「教えて」います。

勉強会とかで「教える（話す）」も、技術書を通して「教える（文章を書く）」も分かりやすく教えるにはこういうとこ気をつけるといいぞー、というノウハウ本を書いておる。

== 教える相手の層をはっきりさせよう

万人に最適な説明文や話し方はありません。教える相手が変われば最適な伝え方も変わります。

たとえばDNSの説明をするとしても、教わる人が「インターネット？ほぼ使ってないです。インスタは使ってますけど」というレベルの大学生なのか、「Aレコードは登録したことあるけどフルリゾルバは知らないです」というレベルのエンジニアなのかによって、話すべき内容や伝え方は大きく異なります。

ここを最初にはっきりさせておかないと「どこまでさかのぼって説明しないとだめなんだ・・・！」と資料作成の途中で破綻したり、あるいは聞き手に「こんな簡単なことはもう知ってるからもっと踏み込んだ内容が聞きたかったのに」と不満を持たれたりします。

=== 広い層を相手に説明せざるを得ないときは？

大規模なカンファレンスなどで、どうしても初心者からベテランまで幅広い層を相手に話をしなければならない時は、開催前や話の冒頭で「対象となる層」を伝えておきましょう。最初に対象層を伝えてもらえば、聞き手も参加するしないをその場で判断することができます。

== 「すんなり入ってくる」ための工夫

=== 今いる場所を確認してゴールを指し示そう

たとえば筆者がアプリケーションエンジニア向けの勉強会で、前に立つなりいきなり「今日はnamed.confについて話します。named.confの書き方は…」と話し始めたら、きっと聞き手の大半は「え？なんのこと？」となるでしょう。

このように聞き手がボールをキャッチできる体勢になっていないのに、いきなりボールを投げてはいけません。

前述の例であれば、いきなり「今日はnamed.confについて話します」と話し出すのではなく、次のようにしてみましょう。

//cmd{
皆さんは普段アプリケーションエンジニアとしてコードを書いていると思いますが、DNSの仕組みについては知っていますか？
では名前解決をするためのDNSサーバを立てたことがある人はいますか？…無い人が殆どですよね。
今日は「1人でDNSサーバを立てられるようになる」をゴールに据えて、DNSサーバのインストールと設定ファイルについて話をしていきます。
では最初にDNSサーバの設定ファイル、named.confについて説明しますね。
//}

このように、
みんなが今いる場所：DNSの仕組みは何となく知ってるけど、DNSサーバを立てたことはない
を確認して、
ゴール：1人でDNSサーバを立てられるようになる
を示した上で、話を始めるようにしましょう。

今いる場所については、教える側と聞き手でお互いに認識があっていれば確認しなくても構いません。書籍の場合は「想定する読者層」や「本著のゴール」で明示しておけば、購入してから「思っていた内容と違った…」という残念な思いをさせずに済むかも知れません。

=== 分かりやすい例は理解を促す

難しい事象を説明するときは、たとえば「digコマンドはスプラトゥーンのブキチのように解説が長い@<fn>{splatoon}」というように、読者にとって身近な物事に置き換えたたとえ話を出すとぐっと分かりやすくなります。

//footnote[splatoon][「DNSをはじめよう」のP102を参照]

次のように事象とたとえ話の図を並べるのも良い方法です。

//image[afterBuyingDomain][ウェブページが表示されるまでの名前解決の仕組み][scale=0.8]{
//}

//image[secretaryLikeNameServer][Bさんに電話をかけるまでの流れ][scale=0.8]{
//}

数学ガール@<fn>{girl}という本に「例示は理解の試金石」というフレーズがたびたび登場します。良い例を作れれば自分はその事象をきちんと理解できているし、作れなければ理解が足りていない。例示を作れるか否かが理解度を判定する材料になるよ、ということです。

//footnote[girl][@<href>{https://www.hyuki.com/girl/}]

確かに思い返してみると、誰かに説明しようとしても上手い例が出てこないとき、あるいは作った例に矛盾が生じてしまうようなときは、まだまだ自分自身の理解が足りていない、いわゆる「チョットワカル」よりずっと手前の「完全に理解した！」という時期でした。

自分の理解が足りないのに人に分かりやすく説明する文章は書けません。例を書いてみることで自分の理解度を試してみましょう。

=== 問いで読者を転ばせた後に解説しよう

何かを教えたいときには、教わる側が一度失敗したり、疑問を抱いたりして「なんで上手くいかないんだろう？」「なんでこんなことするんだろう？」という気持ちにならないことには、いくら教えても知識が上滑りしてしまいます。ですので疑問を抱いてもらってから説明をする、という流れが有効です。

中身を求めてる空のコップがなければ、いくら知識を注いでもだーだーとこぼれるばかりで入っていきません。なので「なんで？」という空のコップを用意してもらって、それから知識を注いで満たすという順番が大切です。

疑問を抱く前に正しい答えばかりをずらずらと並べても、読者は本をぱらぱらとめくりながら「ふーん」と呟くだけでちっとも入っていきません。ですが問いを投げかけて一度読者を転ばせると、読者はようやくそこにあった小石に気づきます。そこですかさず「小石の取り除き方」や「つまずかない歩き方」を解説するのです。

極寒の屋上で1時間吹きっさらしになった後だからこそ、暖かい毛布のありがたみが分かるのであって、ずっと真夏のビーチで過ごしている人に毛布の良さを説いたところで「言ってることは分かるけど…」という感じで実感を伴った理解には全然至りません。それと同じで、まだ何にも困ってないのに「解決策だよ！これがベストなやり方だよ！」と立て板に水の解説をされても、説明があまり染み込んでこないのです。

ですから問いで読者の喉を乾いた状態にして空のコップを持たせてから知識の水を注いで、飲んでもらって染み渡らせましょう。

このとき問いは難しいものでなくても構いません。問いかけられて、その答えが想像したものと同じであれば、読者は「ここまでの理解はあってる」と安心して次へ進むことが出来ます。

== 一度にたくさんのことはつたわらない

=== 伝えることは1つにしぼる

伝えることは1つに絞りましょう。

人はみんな忘れる生き物です。2時間観た映画がとても面白かったとしても、終わった後に「主人公のあの人格好良かったよねー…えーっと主人公…あー、名前なんだっけ…？」みたいなことはざらです。

大事なこと、覚えて帰ってほしいこと、いちばん伝えたいことは1つだけにしぼりましょう。

1冊の本を通して伝えたい大きなメインテーマは何か？いま書いているこの1つの段落で伝えたいことは何か？

規模の大小はあれど、常に伝えることは1つに絞るべきです。ここで絞りきれないと「結局何が言いたかったの？」という話になります。

=== できるだけシンプルに。余計な情報は出さない

「AはBでもあり、Cのときもあるけれど、まれにDのケースもある。Eの可能性も捨てきれない。ですがいったんここではAはB、とだけ覚えておいてもらえればOKです」

こういう説明、誰しも一度は聞いたり読んだりしたことがあると思います。やめましょう。覚えなくていいならいわなくていいし、書かなくていいのです。余計な情報はなくしてできるだけ説明はシンプルにしましょう。

実際に例外があるとしても、それは「AはB」をきちんと理解できた後で改めて説明すれば良いことです。こんな風に言うくらいなら説明時ははっきり「AはBです」とだけ言えばいいのです。できるだけシンプルに。余計な情報は出さないようにしましょう。

== 事実は時代とともに変わる

事実は時代とともに変わります。たとえば大昔、Linuxの環境でnslookupコマンドをたたくと「このコマンドは非推奨だし、将来的には廃止されるから今後は別のコマンドを使ってね」という警告メッセージが表示された時代がありました。その時点では「nslookupコマンドは非推奨なので使わない方がいい」は事実でした。

ですがその後、Bind9.9.0a3がリリースされたタイミングでその警告メッセージは消え、リリースノートには「nslookupを非推奨として扱うのはもうやめるね。非推奨の警告も消したよ」と書かれています。ですので、現在は「nslookupコマンドは非推奨なので使わない方がいい」は事実ではありません。@<fn>{bind}

//footnote[bind][このnslookupにまつわる話の詳細は「DNSをはじめよう」という本のP103に載っています。気になる方は@<href>{https://mochikoastech.booth.pm/}で購入できます。]

このように「○○は使わない方がいい」「○○では××はできない」などの事実は、ミドルウェアやソフトウェアのバージョンアップに伴って状況が変化し、事実でなくなってしまうことが往々にしてあります。

=== 年月日やバージョンを書いておこう

状況の変化は避けられませんので、文章を書くときは必ず「その文章が書かれた年月日」を記載しておきましょう。技術書であれば奥付に書いておけばよいですが、それ以外に文中でも「今年の技術書典」や「4月14日の技術書典」ではなく「2019年4月14日(日)の技術書典」のように、数年経ってからその文章を読んでもいつのことを指しているのか分かるようにしておくとさらによいでしょう。

またミドルウェアやソフトウェアであれば、どのバージョンを想定した内容なのかも記載しておきましょう。

=== 一次ソースに当たろう

前述の「nslookupコマンドは非推奨なので使わない方がいい」のように後から状況が変わった話は、ネットで個人ブログやQiitaを読んだとしても情報が錯綜しており、正確な情報にはなかなかたどり着けません。

ですが特に本を書いたり人に教えたりするときは「検索して出てきたブログに○○と書いてあった」「以前、他のエンジニアに○○と教えてもらった」のような伝聞をそのままソースにするのではなく、きちんと一次ソースに当たるか自分で動作確認をしましょう。間違えないことは無理でも、間違えないよう努力することは教える側の最低限の誠意だと思います。

どうしても一次ソースが見つからない場合は書かない、あるいはこう言われているが正確なところは調べても分からなかった、と正直に書くべきです。筆者もBindのリリースノート（英語）を追いかけていって記述を見つけるまでは、このnslookupの話書きたいけどソースがないと書けない…！と必死でした。

== 「正しい表記」で統一しよう

=== 正しい名前で呼ぼう

ソフトウェアなどの名称は自分がなんとなく使っている略語や誤った表記ではなく、正しい名称で書くようにしましょう。（@<table>{nameCorrect}）

//table[nameCorrect][略称や誤記ではなく正しい表記で書こう]{
略称や誤記	正しい名称
------------------------------------
VSCode	Visual Studio Code
Github	GitHub
Word Press	WordPress
JAVAScript	JavaScript
//}

多少でも名前が間違っていると読者も混乱しますし、間違えられた側も「別にいいですよ」と言いつつ決していい気分はしません。@<fn>{nameWrong}特にスペースの有無や大文字小文字などは意識していても間違えやすいので、筆者は公式サイトや公式ドキュメントの表記をコピーペーストして使うようにしています。

//footnote[nameWrong][会社でMVPとして壇上に呼ばれた際、社長に名前を間違えられて「全社員とはいわないけど、表彰相手の名前くらいは把握しておいて欲しいなー」と思ったあの日…相手に興味なくてもいいんですが、それを悟らせても得るものは何もないので、せめて興味があるように見える最低限の準備は大事だなと思います。]

英数字の羅列だと覚えにくいけれど何の略なのか分かれば理解しやすくなる、という側面もありますので、次のようにはじめは正式名称で紹介して、以降は略語にする形でもよいでしょう。読み方が分からずにひそかに悩んでしまう@<fn>{k8s}のも初心者あるあるですので、カタカナで読み仮名も添えるとなお親切です。


//footnote[k8s][k8sはKubernetesの略でクバネティスと読むとか、nginxと書いてエンジンエックスと読むとか、誰かに教えてもらわないと私は想像もつかなかったです。「んぎっくす…？」と思っていました。]

//cmd{
AWSではサーバはAmazon Elastic Compute Cloudの略で「EC2」（イーシーツー）と呼ばれています。
//}

細かな表記が間違っていると全体の信頼度も下がります。正しい表記を心がけましょう。

=== ひとつのものはひとつの名前で呼ぼう

たとえば説明の中で同じものを「ターミナル」と書いたり「RLogin」と書いたりして表記にばらつきがあると、読者は「RLogin・・・？ああさっきインストールしたターミナルのことか」と脳内で辞書を引くことになります。それに「敢えて別の名前で呼んでいるということは実は違うものを指しているのかな？」と不安になってしまいます。

このように表記ゆれは読者の脳内メモリを無駄に食います。本当に伝えたいことに集中してもらえるよう、同じ単語を2通り以上の表記で表すのはやめましょう。

一般的に見ても色んな名前で呼ばれているような場合は「AやBという名前で呼ばれることもあるけれど、本著では統一してCと呼びます」のように明示しておくと、他の文献を読んだ際に理解がつながるのでさらに親切です。

=== 英語？カタカナ？最後の伸ばし棒はある？ない？

「サーバ」と「サーバー」と「Server」のように、声に出して読んだときは同じでも、文字だと英語で書くのかカタカナで書くのか、最後の伸ばし棒はあるのかないのか、表記のゆれる単語もあります。

サーバは「立てる」なのか、「建てる」なのかのようにどの漢字を用いるか、という問題もあります。

=== どこまで「ひらく」のかも決めておこう

さらに「たとえば」と「例えば」、「はじめて」と「初めて」のようにどこまでの漢字を平仮名に「ひらく」のか、という問題もあります。

これらはいずれも決めの問題ですので、著者の好みでどちらにするのか決めてしまいましょう。

方針が決まった後は、表記ゆれを防ぐためにはただ頑張るよりもツールを使った方が確実です。原稿をVisual Studio Codeで書く場合、vscode-prh-extentionという拡張機能を使い、prh.ymlファイルに期待値（expected）と誤りのパターン（pattern）を書いておけば、波線が出て表記ゆれを指摘してくれます。

著者もここまで書く途中で「表記ゆれ」と「表記揺れ」で表記がゆれていたので、「ゆれ」は平仮名にしよう！と決めてprh.ymlに次のように書き足しました。

//cmd{
  - expected: 表記ゆれ
    pattern:  表記揺れ
//}

=== 【ドリル】表記ゆれを統一しよう

==== 問題

次の文章の表記揺れを統一しましょう。

//cmd{
フルサービスリゾルバに「このドメインに紐づくIPアドレスが知りたいの」と言うと、あちこちのネームサーバに聞きまわってIPアドレスを調べてきて教えてくれます。しかもDNSキャッシュサーバは一度調べると一定期間はそのドメインとIPアドレスの紐づけを記憶（キャッシュ）します。そのためフルリゾルバにもう1回同じことを聞くと今度はすぐに教えてくれます。
//}

//raw[|latex|\begin{reviewimage}\begin{flushright}\includegraphics[width=0.5\maxwidth\]{./images/answerColumnLong.png}\end{flushright}\end{reviewimage}]

==== 解答例

表記ゆれは統一し、他の呼び方を紹介した上で本著ではどう呼ぶのかを明示しておくとさらに親切です。

//cmd{
フルリゾルバに「このドメインに紐づくIPアドレスが知りたいの」と言うと、あちこちのネームサーバに聞きまわってIPアドレスを調べてきて教えてくれます。しかもフルリゾルバは一度調べると一定期間はそのドメインとIPアドレスの紐づけを記憶（キャッシュ）します。そのためフルリゾルバにもう1回同じことを聞くと今度はすぐに教えてくれます。

フルリゾルバは「DNSキャッシュサーバ」「フルサービスリゾルバ」と呼ばれることもありますが、本著では統一してフルリゾルバと呼びます。
//}

== 解釈に迷わない文にしよう

=== はじめて出てきた言葉は説明しよう

いきなり知らない言葉が出てきたのに、その言葉を知っている前提で話が進むと読者は困ってしまいます。

書きながら初出を見つけるセンサーを働かせて、その言葉がはじめて出てきたときはきちんと説明をしましょう。

それから「商業出版」のように一般的な言葉であっても、人によって「何を持ってして商業出版と言うのか？」という定義が異なる言葉もあります。たとえば「書店に並ぶ本はすべて商業出版だ！」という人もいれば、「Amazonで売られていれば商業出版だ」あるいは「出版社が発行すれば書店やAmazonに並ばずとも商業出版だ！」という人もいるでしょう。

技術用語に限らず、一般的な言葉であっても人によって解釈が異なる場合は「本著では商業出版を○○と定義します」のように説明しておくべきです。

=== 「それ」ってどれのことですか？

「それを再びクリックして」「そのボタンを」のように「それ」「あれ」「この」といった指示語を乱用すると、読者は「それってなんだろう？」と迷うことになります。

次の悪い例を見てみましょう。

//cmd{
準備が出来たらセキュリティグループ名と概要を記入して「ルールの追加」をクリックします。もしそれを行った際にエラーが発生したら…
//}

「それ」は何を指しているのでしょうか？いずれとも読めるため読者を迷わせてしまいます。

 * セキュリティグループ名と概要を記入すること
 * 「ルールの追加」をクリックすること
 * セキュリティグループ名と概要を記入してから「ルールの追加」をクリックすること

前述の場合は指示語ではなく、もう一度対象をくことで伝えたいことがより明確になります。

//cmd{
準備が出来たらセキュリティグループ名と概要を記入して「ルールの追加」をクリックします。もし「ルールの追加」をクリックした際にエラーが発生したら…
//}

何度も同じ言葉を繰り返すとかえって読みにくくなることもありますので程度の問題ですが、むやみに指示語を使って読者を迷子にさせていないか「それ」「この」で検索して文章を読み返してみましょう。

=== 幾通りもの解釈ができると迷ってしまう

次の文章を読んでみてください。

//cmd{
面接の場でペアプロをやったら楽しかった話をしたら聞いていた人が「わかる」と頷いた
//}

これは果たしてどちらの意味でしょうか？

 * 「面接の場でペアプロをやった。楽しかった」という話を、後日他の人に話したら「わかる」と頷かれた
 * 「ペアプロをやったら楽しかった」という話を、面接会場で話したら面接官が「わかる」と頷いた

幾通りもの解釈ができる文章は読者の誤解を招き、理解を誤った方へ導いてしまいます。伝えたいのが後者の意味であるなら次のように直してみましょう。

//cmd{
「ペアプロをやったら楽しかった」と面接の場で話したら、聞いていた面接官が「わかる」と頷いた
//}

「面接の場で」を「話したら」の直前に持ってきたことで、ペアプロの話をどこで話したのかが明確になりました。

 * 「ペアプロをやったら楽しかった」と話した
 * 面接の場で話した

 のように「話した」を修飾する言葉が複数ある場合、長い修飾語や重要な修飾語を前にして、短い修飾語や重要でない修飾語を後にした方が分かりやすくなります。

また「聞いていた人」という抽象的な表現から「面接官」に変えたことで、話の聞き手が誰なのかもはっきりしました。このように前後を入れ替えたり、動詞に対応する主語を明確にしたりして、読者を迷わせないようにしましょう。

== できるだけ簡潔にしよう

=== 「ということ」「することができる」は必要？

//cmd{
筆者が文章を書くときに心がけているのは、できるだけ余計なものをそぎ落として簡潔にならないかな、ということです。
//}

たとえば前述の文章も前後を入れ替えるとさらに簡潔になります。

//cmd{
筆者が文章を書くときは「できるだけ余計なものをそぎ落として簡潔にしよう」と心がけています。
//}

「行動に移すときがきたということを知った」よりも「行動に移すときがきたと知った」、「説明することができる」よりも「説明できる」の方がずっと簡潔です。「ということ」や「することができる」を書いたときは、それが本当に必要なのか見直してみましょう。

=== コップからあふれる長い文章は切ろう

文章を読むとき、「。」で一区切りがつくまで、私たちはその文章を脳内メモリに一時記憶として載せ続けています。脳内メモリが分かりにくければ、卓上に置かれた小さなコップを想像してみてください。

コップに一口分の飲み物を注がれ、それを飲んでコップを空にする、を繰り返すことで私たちは「文章」の意味するところを理解し記憶の引き出しにしまい込みます。

ですが「。」で一区切りがつかず、延々とコップに飲み物を注ぎ続けるとそのうちコップから飲み物がこぼれてしまいます。あふれてしまうと飲むこともできません。

一時記憶のための脳内メモリが不足して、飲み物をコップの中にとどめておけず、記憶の引き出しにしまい込む前に一部を消失してしまうのです。

長すぎる文章の例を読んでみましょう。

//cmd{
データセンターは「物理的な攻撃や侵入」からサーバを守るための設備を整えており、堅牢さはデータセンターによって異なりますが、たとえば「所在地を一般に公開しない」「建物自体に侵入経路となる窓がない」「入るときと出るときで体重が違うと出られない」といったような防犯対策が一例として挙げられ、この入退出時の体重チェックは盗んだハードディスクを持ち出せないようにするためのものです。
//}

長い…！勉強会などで人前に立って話す際も、この長さだと途中で息が切れてしまいます。あくまで目安ですがひとつながりの文章で50文字を超えたら「。」で区切りましょう。前述の文章を適切な長さで区切ると次のようになります。

//cmd{
データセンターは「物理的な攻撃や侵入」からサーバを守るための設備を整えています。
堅牢さはデータセンターによって異なりますが、たとえば次のような防犯対策が例としてあげられます。

 * 所在地を一般に公開しない
 * 建物自体に侵入経路となる窓がない
 * 入るときと出るときで体重が違うと出られない
 
 ちなみに入退出時の体重チェックは、盗んだハードディスクを持ち出せないようにするためのものです。
//}

文章を適切な長さで区切り、かつ列挙していたものを箇条書きにしたことでぐっと読みやすくなりました。一文をコップからあふれるほど長くしすぎないようにしましょう。

=== 自信がないからといってぼかさない

「恐らく」「と思われる」「らしい」「など」「やや」「おおよそ」「少し」のように、伝えたいことをぼかして不明確にしてしまう言葉は安易に使わないようにしましょう。

そうした言葉が自然と入ってしまう箇所は「一次ソースの確認が出来ていない」「実はしっかり理解できていない」というように、自分でも自信が持てていない部分であることが多いです。筆者も身に覚えがあります。

断言されておらず、ぼかされていると「断言されていないということは何か例外的なケースがあるのかな？」と読者に余計な想像をさせてしまいます。

自信が持てないときは伝えたいことをぼかしてごまかすのではなく、さらに調べるか、こういう事情で断言できないという理由を併せて書いておきましょう。

== 推敲は文章の品質を上げる

=== 文章はたくさん撫でるとつやつやになる

文章は猫と同じでたくさん撫でるとつやつやになります。

書いた文章を頭からしっぽの先まで撫でるように読んでいくと、必ずざらっとしたところやささくれたところが見つかるので、そこを直してやってまた頭からしっぽまで撫でて…を繰り返しましょう。一度もざらっとせずにしっぽの先までたどり着けたら文章の毛づくろいは完了です。

この方法だとどうしても頭の方をたくさん撫でることになるので、時間が足りないと頭だけつやつやでしっぽはぼさぼさになってしまいます。全身よい毛並みの文章にできるよう、最初にスケジュールを引く時点で推敲のための時間をしっかり確保しておきましょう。

=== 仮想の読者とリアルな読者

筆者が「渾身の出来！」と思っても、想定する読者層が「分かりやすい！」と思ってくれなければただの独りよがりになってしまいます。

文章を読むときはいったん自分が書き手であることは忘れて、脳内に用意した仮想の読者に読んでもらうようにしましょう。筆者の場合は「エンジニアとして勉強を始めたころの自分」を仮想読者として脳内に保っています。

読者はわがままなものです。書き手の意図はちっとも汲んでくれないし、ちゃんと書いてあっても読まないし、すぐに勘違いします。

=== 読者の歩幅に合わせよう

筆者は大きな駅でよく迷子になります。「大江戸線はこちら」と書いてある看板の矢印に従って角を曲がったのに、そこに次の案内がなくて「大江戸線！どこ！！」となるのです。

同じことは技術書でも起こります。説明という飛び石の間隔が読者の歩幅に合っていないと、読者は次の石がどこにあるのか分からなくて立ち尽くしてしまうのです。

たとえば初心者に向けて説明するときは「httpd.confを編集したらApacheを再起動してNameVirtualHostをonにしましょう」だけだと「どうやってonにするの…？」と立ち尽くしてしまいます。「viコマンドでhttpd.confを開いて、iで編集モードにしたら最下部にNameVirtualHost onと書いて、エスケープで閲覧モードに戻ってから:wqで保存しましょう。apachectl restartでApacheを再起動するとNameVirtualHostがonに切り替わっています」のように、説明という飛び石の間隔を狭めて読者の歩幅に合わせてあげましょう。

逆に上級者向けであれば、必要以上に飛び石が多いと冗長に感じられます。対象としている読者層の歩幅に合わせてあげましょう。

=== リアルな読者には未知の視点

どんなに想像力があっても仮想の読者には限界があります。推敲の後半には同僚や後輩といったリアル読者をつかまえて原稿を読んでもらいましょう。

たとえば「AWSをはじめよう」ではRLoginというターミナルソフトを使ってサーバにログインする…という下りがあるのですが、ここを実際に試してもらったところ「画面の文字をコピーしたり、画面にペーストしたりするにはどうしたらいいの？ctrl+pしても何も貼り付けられない…」という声があがりました。

これは筆者にとっては完全に盲点でした。コピーしたければ該当箇所をマウスで選択すればいいし、右クリックすればペーストされる、というのは筆者にとってもはや「当たり前」のことだったので、そこでつまづくという視点が欠けていたのです。

このようにリアルな読者は必ず未知の視点を持っています。脳内の仮想読者だけでなくリアル読者に読んでもらうことで、自分では気づけなかった説明不足が見つかるはずです。

= 技術を登壇で分かりやすくつたえる

人前に出て話すと緊張して手汗が止まらず声が震える…そんなあなたに向けて、この章では勉強会やイベントなどで登壇するときのコツをお話しします。

//pagebreak

== 段取り八分現場二分

「段取り八分現場二分」@<fn>{dandori}という言葉があるように、登壇を成功させるためには当日の働きよりも事前の準備の方が肝要です。

//footnote[dandori][「段取り八分仕事二分」や「段取り八分仕上げ二分」とも言われているようです。]

=== 絶対必要リハーサル

もしあなたが「人前での発表がうまくいかない」とお悩みであれば、うまくいかない原因はきっとたったひとつです。リハーサルをしないから、もしくはリハーサルの回数が足りていないからです。

登壇する際はできるだけ本番と同じ環境を用意して何度もリハーサルをしましょう。リハーサルは誰かに聞いてもらってもいいし、会議室やカラオケなどで自分ひとりだけでやっても構いません。

筆者もはじめての内容で登壇するときは必ずリハーサルを最低2回はしています。

リハーサルはパワーポイントの資料を投影して印刷した発表原稿を手に持ち、しっかり声を出して当日と同じようにやってみます。

実際に声に出しながらやってみると、必ず発表原稿や投影資料でおかしなところが見つかるので、そこを直してもう1回通しでやってみましょう。持ち時間に対して長すぎてオーバーしてしまうとか、逆に想定より早く終わってしまうといった問題もリハーサルをやれば分かります。

この「直したらもう1回通しリハーサルをする」を繰り返す作業は、文章を頭からしっぽの先まで撫でてざらっとしたところを直していく毛づくろい作業に似ています。

一度もつまずかずに最後まで通しリハーサルが出来たら準備完了です。

=== 準備時間は登壇時間の30倍

研修や勉強会などで発表をするとき、どれくらいの準備時間が必要なのでしょうか？

たとえば人事に依頼されて新卒向けに何か1時間教えることになったとします。その場合、どれくらいの準備時間を見積もっておけばよいのでしょう？

今までいろんな勉強会を開催したり、イベントで登壇したりした、筆者個人の体感としては1時間教えるには30時間の準備時間が必要です。1日8時間働くとして3.5人日くらいは見積もっておこう、ということですね。

発表時間に対して30倍の準備時間が必要なので、たとえば5分のライトニングトーク@<fn>{lightning}をするには2時間半の準備時間を確保しないといけません。

「え、いくらなんでもウソでしょ？そんなにかかるの？！」と思われる方が殆どだと思います。それに実際上司にも「1時間話すので準備に3.5人日かかります」とは言いづらいと思うのですが、ここをケチるとすべき準備がきちんと出来ず、結果ぐだぐだな登壇となってしまいます。そうなれば発表者も「もう二度とやりたくない…」と落ち込むし、聞く側も時間を無駄にして、折角勉強会を開催したのに誰も幸せになりません。

えらい人は「勉強会開催して！」とか「教育担当やって！」とか「もっとアウトプットして！」と頼むときは、発表の30倍の準備時間を工数としてちゃんと確保してあげてください。

//footnote[lightning][5分だけ喋ってすぐ終わる、一瞬の稲妻（Lightning）のような電光石火のトークのこと。IT系のイベントやカンファレンスなどでは、メインセッションが終わった後にLTの枠が用意されていることが多い。]

== 前に立って話すときのテクニック

=== 演説じゃなくて対話をしよう

仲のいいAさんとふたりっきりで話をするときはどんな濃い話題でも気兼ねなく話せます。ですがBさんが増えて3人になると、AさんとBさんどちらにも通じる話題を選ばなければならず、話の濃度は少し下がります。そうして人数が増えるにつれて「全員に通じる話題」は段々無難なものになっていき、話の濃度はますます下がっていきます。

このように会話に参加する人数が増えていくと、最終的には対話ではなく一方的な演説になってしまいがちです。

「仲良しのAさんが自分に向かって濃い話をしている」と思えば話を聞く方も身が入りますが、「誰かがみんなに分かる話題を演説している」と思うと集中力は途切れがちです。

伝えたいことがあるなら1対多で演説をするのではなく、たとえ大勢を前に話していてもひとりひとりの反応を見ながら瞬間瞬間は1対1で話をするよう意識しましょう。

こちらの目を見て、にっこりしながら何か話している、何か伝えようとしている、それだけで聴講者は話を聞いてくれる姿勢になります。

発声した声が放物線を描いて相手のところでボールのように飛んでいくイメージを持ちましょう。不特定多数の誰かに向かって大量のボールを適当に投げるのではなく、会場を見回して聴講者と目をあわせながらひとつひとつ「このボールはあの人に…よし、キャッチした」「今度のボールはこっちの人に…よし、キャッチした」というように伝えたいことを声にのせて投げるのです。

一方的な演説は相手の心に届きません。大勢を前に話していても対話を心がけましょう。

=== 「あー」「えー」よりも沈黙を

早口や小声は聞き取りづらいので、できるだけ意識してゆっくりと大きな声で話しましょう。緊張しているときは自分で思っている以上に早口や小さい声になってしまいます。

また言葉と言葉の間でどうしても「あー」や「えー」と言いたくなりますが、言葉が続かないとき、それから息が続かないときは20秒くらい沈黙しても問題ありません。不思議なことに沈黙があった方がずっと話し上手に見えるものです。

=== 動くものは目で追ってしまう

人は動くものに目がいくので、特に集中して聞いて欲しいときは立ち上がったり、うなづいたり、手をあげてみたり、その手をきゅっと握ってみたり、投影スライドの右前から左前に移動したりしてみましょう。

歩き回りながら聴講者に向かって「どの辺が分からなかった？」と話しかけてみるのもよいです。

=== 「大丈夫？」と聞かないで

聴講者の質問を引き出そうと話しかけるのはとてもよいのですが、そのとき「大丈夫ですか？」「分かりましたか？」と聞くと、人はつい「大丈夫です！」「分かりました！」と応えてしまいます。質問するときは「ここまでの話でいまいちわかってないところをひとつだけ挙げるとしたら？」のように、聴講者が疑問を切り出しやすい聞き方にしましょう。

筆者の体感としては、聞き手はみんな、登壇者が思っている以上に色んな疑問が頭に浮かんでいて、でも恥ずかしくてそれを聞けないことでひそかに苦しんでいます。

演説ではなく対話を心がけて、聴講者の様子に目をこらし、耳を澄ませましょう。

=== 1匹1匹にあわせて猫じゃらしを振ろう

同じ資料、同じ内容、同じ所要時間であっても2人に向かって話すのと250人を前に話すのでは疲れ方はまったく異なります。

疲れが異なる理由は、前述のようにひとりひとりの反応を見て関心を引きながら話そうとしているからです。2匹を相手に猫じゃらしを振るのと、250匹を相手に猫じゃらしを降り続けるのでは後者の方が疲れて当然ですよね。

もし大勢を相手に話しても大して疲れないとしたら、猫じゃらしが適当になっているのかも知れません。対話ではなく演説になっていないか、自分の話し方を振り返ってみましょう。

== 教えるときの心のあり方

=== 教わる側は恥におびえている

教わる側は「こんなことも知らないのかと思われたくない」「技術がないことを悟られたら怒られるのではないか」「間違えて恥をさらしたくない」と常におびえています。

本題に入る前にまずは「この人は私が分からないと言っても怒らない人だ」という安心感を持ってもらいましょう。そうしないと彼らはあなたから「知らない」「分からない」を隠すことに全力を注いでしまい、質問など出てこないし、何を説明しても入っていかなくなってしまいます。

そのためにも心のどこかで「こいつこんなことも知らないのか」「こんなに分かりやすく説明してやってるのになんで分からないんだ」と馬鹿にする気持ちがあってはいけません。どんなに取り繕ってもその気持ちはにじみ出して、教わる側を萎縮させます。

もし説明を分かってもらえないとしたら、きっと伝え方や話す順番にさらなる工夫が必要なのです。あるいはもっと手前の段階から説明が必要なのかも知れません。いずれにせよ、否は教える側にあります。

===[column] 【コラム】真面目な後輩に説明を聞いてもらえないのはなぜ？

ある日、「サーバに入ってこのファイルを落としてきて！14時までによろしくね」と頼まれた新米エンジニアのAさんが「サーバに入れない…どうしよう…」と困っていました。

先輩エンジニアのBさんは、設定を見てすぐに「ログイン時に使う秘密鍵を指定していないから入れないんだな」と分かったものの、サーバにログインするときのSSHの仕組み自体を理解しておいて欲しかったので、Aさんに「そもそもSSHってね…」と説明を始めました。

するとAさんは説明を聞いてはいるもののどこか上の空で「いいから早く答えだけ教えて！」という気持ちが隠しきれない様子です。Aさんは普段から真面目で、技術的なことも熱心に吸収しようとしているタイプだと思っていたのにどうしてだろう？とBさんは不思議に思いました。

みなさんはBさんがAさんに説明を聞いてもらえなかった理由が分かりますか？

Bさんは新米エンジニアAさんのコップに「SSHの知識」を注ごうとしたのですが、このときAさんのコップは「14時までにサーバに入ってファイルを落としてきてって頼まれたのに！間に合わなかったらどうしよう！早くやらなきゃ！」という気持ちでいっぱいでした。

すでに中身がいっぱいのコップに上から新しい知識を注いでも、あふれるばかりで新しい知識はちっとも入っていきません。

ですのでまずは「サーバに入れない」という問題をさっと解決して、ファイルを落としてくるところまで終わらせてコップを空にしてあげましょう。その上で「間に合ってよかったね。ところでなんでサーバに入れなかったのか、仕組みを理解しておくと次からは自分で対処できると思うからちょっと説明してもいい？」と切り出せば、Bさんの説明はしっかりAさんのコップに入っていったはずです。

めちゃくちゃ怒っているクレーマーに「お客様それは違います！」と勘違いを指摘しても火に油で全然聞き入れて貰えないのと同じですね。まずは「なるほど、なるほど。不快な思いをされたんですね、なるほど」とひたすら聞いてコップを空にさせてから「恐らくですが認識に齟齬が…」と切り出さないと、こちらの言いたいことが相手のコップに入っていきません。

説明をあんまり真面目に聞いてもらえない…と感じたときは、相手のコップが空で中身を入れられる状態なのか？を先に確認してから話すようにしてみましょう。

= 教わり上手をはじめよう

分かりやすく教えるコツをまとめた本著ですが、実は教わる側にもコツがあります。

教わってもよく分からないときは「この人教え方下手だな…」とげんなりする前に、あなたがよい聞き手であるかを振り返ってみましょう。

//pagebreak

== 知らない・分からないを正直に言うことこそ最初の一歩

これはエンジニアに限らずですが、何かを学んで圧倒的に成長するためには、

 * お！こいつはデキるやつだな！って思われたい
 * 間違えたことを指摘されて恥をかきたくない
 * 同期の中でも使えないダメなやつだ、って思われたくない
 
という気持ちはさっさと海にぶん投げて、「知らない」「わからない」を正直に言えるようになることが何より大切です。

===[column] 【コラム】誰より成長したのは文学部出身のエンジニア

筆者が新卒でIT系の会社に入ったとき、エンジニアの同期が10名弱いたのですが、その殆どが大学や大学院でエンジニアリングの勉強をしてきたメンバーでした。そしてその中にひとりだけ「文学部出身で一切経験ありません」という男性がいました。ここでは彼をKさんとします。

入社後の技術研修で、教育担当の先輩社員にたとえば「cronって知ってる？」と聞かれたとします。そんなとき当時の筆者はプライドの塊だったので「cronか…大学の授業で聞いた気もするし、全然知らない訳じゃないし…とりあえず知ってるって言っとこうかな…」などと保身の方向で頭がフル回転していたのですが、Kさんはそんな私の思惑も知らずに隣でさらっと「知らないッス」と言ってのけます。

「知らない」を言うことにものすごく抵抗感のあった筆者は、それだけで「Kさん知らないって言った！！えっ、ちょっと！叱られない？！」と慌てたのですが、先輩社員はただ「教える前に今いる場所を確認しておく」ために聞いただけなのでもちろん怒るわけがありません。「そっか、cronっていうのはね…」とKさんに説明をはじめました。

先輩からしっかり教えてもらったKさんのcronに対する理解度は0から10になりました。元々2くらい知っていた筆者と比較すると、その時点でKさんの方がcronについて詳しくなりました。たった1回「知らない」を言えたか言えなかったかだけで、筆者とKさんの間には8もの差がついてしまったのです。

その調子でKさんは「知らない」「わからない」を臆せずにばんばん聞いていって、入社して1年が経ったとき、エンジニアとして一番成長していたのはKさんでした。

この話で伝えたいのは「知らない」「分からない」を言って損することは何もない、ということです。

Kさんは「知らない」と言ったことで10の知識を得ます。近くにいた著者も知ってるつもりだったけど実際は2しか理解していなかったので、Kさんのおかげで残り8の知識を得ます。そして教える側の先輩社員も、相手の理解度に合わせて教えて理解してもらわないと実務に入ったときに困るので、知らなかったら「知らない」と言ってもらった方が有り難いのです。会社だって研修をしたのに理解度が0や2の状態で研修が終わるより、新入社員みんなが10の知識を持ってくれた方が嬉しいです。

Kさんが「知らない」を言ったことで誰も損をしていません。むしろ周囲も「知らない」が言いやすくなるので好循環です。

医者に対して「ここが痛い」を隠してもいいことはないように、エンジニアとして働く上で「知らない」「分からない」を周囲に隠してもいいことはありません。「知らない」を晒せれば、それが学びの第一歩になります。

== 質問はオープンな場でしよう

「何か分からないこととか質問はありますか？」と聞かれたときには手を挙げないけど、研修が終わった後に個別にそっと聞きに行くなんてことをしていませんか？

クローズドな場で質問すると、講師役はあなたひとりにしか回答を伝えることができません。後から何人もに同じ質問をされると、講師役としては「個別の質問はコスパが悪いの！お願いだからみんながいるときに聞いて！」という気持ちになることもあります。

分からないことがあったらオープンな場で聞いてくれると一度でみんなに伝えられます。メリットしかありません。前述のコラムであったように、Kさんが臆せず質問してくれたことによって筆者がおこぼれで学べたことはたくさんありました。

あなたがオープンな場で最初に質問をすれば次の人も続きやすくなります。あなたがレベルの低い質問をすれば、周りも「なんだ…自分だけが特にレベル低いってわけじゃないんだ」とほっとして次から質問しやすくなります。あなたが分からなかったことを聞けば、同じことで悩んでいた他の人も「同じところでつまづいてる人がいたんだ」と言い出しやすくなります。

講師役からすると「同じ疑問を抱いている人がいただろうから、みんながいるときに聞いてもらえたら助かるんだけど…」


とにかく「質問する奴は偉い」@<fn>{question}のです。

//footnote[question][@<href>{https://twitter.com/motcho_tw/status/870589211832795136}]

===[column] 【コラム】失敗するとしっぱいねこが生まれる

失敗すると恥ずかしくて落ち込むものですが、あなたが失敗したら「しっぱいねこ」が生まれると想像してみましょう。灰色でつるつるした毛並みの可愛いねこです。あなたが間違った理解をしていてトンチンカンな質問をしたとか、Gitで誤ったブランチをMasterにマージしたとか、リリースをしくじって切り戻しになったとか、何かしら失敗をするとしっぱいねこがポンッと生まれて「いやー、しっぱいしっぱいー」と言いながらてくてく歩いてきます。大きな失敗をすると大きなしっぱいねこが生まれます。小さなしっぱいだと小さなしっぱいねこです。どちらもかわいいですね。

しっぱいねこは仔猫を生みます。たいていの場合は同じ「しっぱいねこ」が生まれますが、稀に「せいこうねこ」というレアなねこが生まれることがあります。

そしてこの「せいこうねこ」は必ずしっぱいねこからしか生まれません。@<fn>{pokemon}せいこうねこはこがね色でふわふわした毛並みのすごく可愛いねこです。せいこうねこは「やったー、せいこうー」と言いながらしっぽをぱたぱた振ってくれます。

//footnote[pokemon][ようやくゲットした色違いポケモンを育て屋に預けて卵を産ませても、普通のポケモンしか生まれないのと同じですね。]

あなたがしっぱいねこを生めば生むほど、せいこうねこが生まれる確率は上がっていきます。逆に恥をかく失敗を恐れて何もしないと、しっぱいねこが生まれないのでせいこうねこも生まれません。

失敗したら「失敗した…恥ずかしい…地面に埋まりたい…」と落ち込むのではなく、「良いしっぱいねこが生まれた！」としっぱいねこをぎゅっと抱きしめて喜んでみましょう。成功は失敗の後にしか生まれないのです。

== 地蔵にならず反応を返そう

勉強会などで講師役をやりたがらない人に「人前で話すことの何がいや？」と聞くと、いちばん多いのは「リアクションがなくてつらい」です。

それと根っこは同じかと思いますが、
 * ちゃんとみんなの興味があることを話せているか、退屈させているんじゃないかと不安
 * 自分なんかがつまらない、間違った、しょうもない話をしてみんなの時間を浪費するのは申し訳ない
 * 「それ違うだろ！」と内心で思われてるんじゃないかと思って目線がつらい
というように、聞き手のリアクションがないことによって疑心暗鬼になった挙句、話すのが嫌になっていることが分かります。

確かにひとりで喋っていて誰も何も反応してくれないと
 * みんなどう思ってるんだろう？
 * 退屈だな、つまんないな、と思ってるんじゃないかな？
 * 内心、低レベルな発表だなとか、それ間違ってるよって思われてるのでは？
とどんどん悪い方へ想像が転がっていってしまうものです。

リアクション、つまり何にもレスポンスがないのってすごくつらいですよね。ボールを投げても投げても返ってこない。一度でも人前で話した経験があれば、あの冷や汗がでるような、吸っても吸っても酸素が入ってこないような焦る感じは分かると思います。リアクションがないのは本当につらい！

だというのになぜ人間は「聞く側」に回った瞬間にすべて忘れて地蔵になってしまうのでしょう？

反応がないのは暗に「つまらない」と言っているようなものです。そしてありがちなのが褒めもせずに間違いの指摘から入るパターンです。「この資料、ここが間違ってませんか？」悪いところの指摘なんか二の次でいいから！先ずは！褒めようよ！

という訳で聞く側も聞く姿勢を正してよい聞き手を実践してください。まず始まったら拍手で迎える！わーわー言って場を温める！

みんな自分が発表するのは嫌なのに、その嫌なことを頑張ってやっている人が目の前にいて褒めないとは何事だ！という話です。合コンさしすせそのように「さすがー」「知らなかった－」「すごーい」「センスいいー」「そうなんだー」と合いの手を挟みましょう。

大事なことなのでもう1回書きますが、リアクションがないのは教える側にとって本当につらいことです。みんながアウトプットをしていくには受け止める側の熟練度も大切です。地蔵はやめてばんばんリアクションをしていきましょう。

== 教える側を体験すればよい教わり手になれる

「一人暮らしをはじめたら今まで何の気なしに食べていた料理の有り難みが分かった」という話はよく聞きます。

それと同じで「教える側」を体験すると、準備の大変さや伝えることの難しさがよく分かります。

「先輩は教えるのが下手だ」「説明されても全然理解できない」と思ったら、次の勉強会は自分がやりますと手を挙げてみましょう。

新しい技術を習得したければ、誰かに教わるよりも、誰かに教えるつもりで勉強した方が身につきます。

そして一度教える側を体験すると、再び教わる側になったときに相手の意図や親切をくみ取れるようになります。